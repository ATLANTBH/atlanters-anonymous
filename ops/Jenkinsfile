pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      serviceAccount 'jenkins'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker
    command: ['cat']
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: dockersocket
  - name: helm
    image: lachlanevenson/k8s-helm:v2.13.0
    command: ['cat']
    tty: true  
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:v1.12.8
    command: ['cat']
    tty: true
  volumes:
  - name: dockersocket
    hostPath:
      path: /var/run/docker.sock
"""
    }
  }
    stages {
        stage('Pull') {
            steps {
            checkout scm
            }
        }
        stage('Build') {
            steps {
                script {
                    container('docker') {
                        docker.withRegistry('', 'abhdocker') {
                            def image = docker.build("atlantbh/atlanters-anonymous:${IMAGE_TAG}", "--network=host --build-arg REACT_APP_GIT_SHA=${GIT_COMMIT} .")
                            image.push(IMAGE_TAG)
                        }
                    }
                }
            }
        }

        stage('Deploy helm chart') {
            steps {
                container('helm') {
                    sh '''
                    #!/bin/bash
                    
                    if [[ "$ENVIRONMENT" == "deploy" ]]; then
                        values_arg="-f ops/helm/values.deploy.yaml"
                    fi;
                    helm upgrade aa-${ENVIRONMENT} \
                         --recreate-pods \
                         --namespace aa \
                         --install $values_arg \
                         --set image.tag=${IMAGE_TAG} \
                         --set ingress.annotations."nginx\\.ingress\\.kubernetes\\.io/whitelist-source-range"=${IP_WHITELIST} \
                         --set ingress.hosts[0]=${ENDPOINT} \
                         --set ingress.tls[0].hosts[0]=${ENDPOINT} \
                         --set ingress.tls[0].secretName=aa-${ENVIRONMENT} \
                         --set config.jwtSecret=${JWT_SECRET} \
                         --set config.cookieS=${COOKIE_S} \
                         ops/helm/
                    '''
                }
            }
        }
    }
    post {
        // only triggered when blue or green sign
        success {
            slackSend color: 'good', message: """
Job ${JOB_NAME} [${env.BUILD_NUMBER}] finished successfully. (<${env.BUILD_URL}|Open - Jenkins>)
Endpoint: https://${ENDPOINT}
Environment: ${ENVIRONMENT}
"""
        }
        // triggered when red sign
        failure {
            slackSend color: 'danger', message: """
Job ${JOB_NAME} [${env.BUILD_NUMBER}] FAILED. (<${env.BUILD_URL}|Open - Jenkins>)
Endpoint: https://${ENDPOINT}
Environment: ${ENVIRONMENT}
"""
        }
    }
}
